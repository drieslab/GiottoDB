% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Math.R, R/coerce.R, R/extract.R,
%   R/dbSpatProxy.R, R/dd.R, R/names.R, R/operations.R, R/plot.R,
%   R/spatial_chunking.R
\docType{methods}
\name{Math,dbMatrix-method}
\alias{Math,dbMatrix-method}
\alias{as.matrix,dbMatrix-method}
\alias{as.polygons,dbPolygonProxy-method}
\alias{as.points,dbPointsProxy-method}
\alias{[,dbData,missing,missing,missing-method}
\alias{[<-,dbData,missing,missing,ANY-method}
\alias{[,dbMatrix,gdbIndex,missing,missing-method}
\alias{[,dbMatrix,missing,gdbIndex,missing-method}
\alias{[,dbMatrix,gdbIndex,gdbIndex,missing-method}
\alias{[,dbDataFrame,gdbIndex,missing,ANY-method}
\alias{[,dbDataFrame,missing,gdbIndex,ANY-method}
\alias{[,dbDataFrame,gdbIndex,gdbIndex,ANY-method}
\alias{[,dbDataFrame,missing,missing,missing-method}
\alias{[<-,dbDataFrame,missing,missing,ANY-method}
\alias{[,dbPolygonProxy,character,missing,ANY-method}
\alias{[,dbPointsProxy,character,missing,ANY-method}
\alias{[,dbPointsProxy,numeric,missing,ANY-method}
\alias{[,dbPointsProxy,logical,missing,ANY-method}
\alias{[,dbPolygonProxy,missing,character,ANY-method}
\alias{[,dbPointsProxy,missing,character,ANY-method}
\alias{[,dbPointsProxy,missing,numeric,ANY-method}
\alias{[,dbPointsProxy,missing,logical,ANY-method}
\alias{[,dbPointsProxy,gdbIndexNonChar,gdbIndex,ANY-method}
\alias{values,dbPolygonProxy-method}
\alias{values,dbPointsProxy-method}
\alias{hidden_aliases}
\alias{names,dbDataFrame-method}
\alias{names<-,dbDataFrame,gdbIndex-method}
\alias{names,dbPolygonProxy-method}
\alias{names<-,dbPolygonProxy,gdbIndex-method}
\alias{names,dbPointsProxy-method}
\alias{names<-,dbPointsProxy,gdbIndex-method}
\alias{rownames,dbData-method}
\alias{rownames,dbMatrix-method}
\alias{rownames<-,dbMatrix-method}
\alias{colnames,dbData-method}
\alias{colnames,dbMatrix-method}
\alias{colnames<-,dbMatrix,ANY-method}
\alias{colnames<-,dbDataFrame,gdbIndex-method}
\alias{dimnames,dbMatrix-method}
\alias{dimnames<-,dbMatrix,list-method}
\alias{dimnames,dbDataFrame-method}
\alias{dimnames<-,dbDataFrame,list-method}
\alias{Arith,dbMatrix,ANY-method}
\alias{Arith,ANY,dbMatrix-method}
\alias{Ops,dbMatrix,ANY-method}
\alias{Ops,ANY,dbMatrix-method}
\alias{Arith,dbMatrix,dbMatrix-method}
\alias{Ops,dbMatrix,dbMatrix-method}
\alias{rowSums,dbDenseMatrix-method}
\alias{colSums,dbDenseMatrix-method}
\alias{colSums,dbSparseMatrix-method}
\alias{rowMeans,dbDenseMatrix-method}
\alias{rowMeans,dbSparseMatrix-method}
\alias{colMeans,dbDenseMatrix-method}
\alias{colMeans,dbSparseMatrix-method}
\alias{colSds,dbDenseMatrix-method}
\alias{colSds,dbSparseMatrix-method}
\alias{rowSds,dbDenseMatrix-method}
\alias{rowSds,dbSparseMatrix-method}
\alias{mean,dbMatrix-method}
\alias{t,dbPointsProxy-method}
\alias{t,dbPolygonProxy-method}
\alias{t,dbMatrix-method}
\alias{nrow,dbDataFrame-method}
\alias{nrow,dbPointsProxy-method}
\alias{nrow,dbPolygonProxy-method}
\alias{ncol,dbMatrix-method}
\alias{ncol,dbDataFrame-method}
\alias{ncol,dbPointsProxy-method}
\alias{ncol,dbPolygonProxy-method}
\alias{dim,dbData-method}
\alias{dim,dbMatrix-method}
\alias{dim,dbPointsProxy-method}
\alias{dim,dbPolygonProxy-method}
\alias{length,dbSpatProxyData-method}
\alias{plot,dbPointsProxy,missing-method}
\alias{ext,dbSpatProxyData-method}
\alias{ext<-,dbSpatProxyData,SpatExtent-method}
\title{Convert a GiottoDB object to a matrix}
\usage{
\S4method{Math}{dbMatrix}(x)

\S4method{as.matrix}{dbMatrix}(x, ...)

\S4method{as.polygons}{dbPolygonProxy}(x, ...)

\S4method{as.points}{dbPointsProxy}(x, ...)

\S4method{[}{dbData,missing,missing,missing}(x, i, j)

\S4method{[}{dbData,missing,missing,ANY}(x, i, j) <- value

\S4method{[}{dbMatrix,gdbIndex,missing,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbMatrix,missing,gdbIndex,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbMatrix,gdbIndex,gdbIndex,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbDataFrame,gdbIndex,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbDataFrame,missing,gdbIndex,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbDataFrame,gdbIndex,gdbIndex,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{dbDataFrame,missing,missing,missing}(x, i, j)

\S4method{[}{dbDataFrame,missing,missing,ANY}(x, i, j) <- value

\S4method{[}{dbPolygonProxy,character,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,character,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,numeric,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,logical,missing,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPolygonProxy,missing,character,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,missing,character,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,missing,numeric,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,missing,logical,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[}{dbPointsProxy,gdbIndexNonChar,gdbIndex,ANY}(x, i, j, ..., drop = FALSE)

\S4method{values}{dbPolygonProxy}(x, ...)

\S4method{values}{dbPointsProxy}(x, ...)

\S4method{crop}{dbSpatProxyData,SpatExtent}(x, y, ...)

\S4method{names}{dbDataFrame}(x)

\S4method{names}{dbDataFrame,gdbIndex}(x) <- value

\S4method{names}{dbPolygonProxy}(x)

\S4method{names}{dbPolygonProxy,gdbIndex}(x) <- value

\S4method{names}{dbPointsProxy}(x)

\S4method{names}{dbPointsProxy,gdbIndex}(x) <- value

\S4method{rownames}{dbData}(x)

\S4method{rownames}{dbMatrix}(x)

\S4method{rownames}{dbMatrix}(x) <- value

\S4method{colnames}{dbData}(x)

\S4method{colnames}{dbMatrix}(x)

\S4method{colnames}{dbMatrix,ANY}(x) <- value

\S4method{colnames}{dbDataFrame,gdbIndex}(x) <- value

\S4method{dimnames}{dbMatrix}(x)

\S4method{dimnames}{dbMatrix,list}(x) <- value

\S4method{dimnames}{dbDataFrame}(x)

\S4method{dimnames}{dbDataFrame,list}(x) <- value

\S4method{Arith}{dbMatrix,ANY}(e1, e2)

\S4method{Arith}{ANY,dbMatrix}(e1, e2)

\S4method{Ops}{dbMatrix,ANY}(e1, e2)

\S4method{Ops}{ANY,dbMatrix}(e1, e2)

\S4method{Arith}{dbMatrix,dbMatrix}(e1, e2)

\S4method{Ops}{dbMatrix,dbMatrix}(e1, e2)

\S4method{rowSums}{dbDenseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{colSums}{dbDenseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{colSums}{dbSparseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{rowMeans}{dbDenseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{rowMeans}{dbSparseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{colMeans}{dbDenseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{colMeans}{dbSparseMatrix}(x, na.rm = FALSE, dims = 1, ...)

\S4method{colSds}{dbDenseMatrix}(x, ...)

\S4method{colSds}{dbSparseMatrix}(x, ...)

\S4method{rowSds}{dbDenseMatrix}(x, ...)

\S4method{rowSds}{dbSparseMatrix}(x, ...)

\S4method{mean}{dbMatrix}(x, ...)

\S4method{t}{dbPointsProxy}(x)

\S4method{t}{dbPolygonProxy}(x)

\S4method{t}{dbMatrix}(x)

\S4method{nrow}{dbDataFrame}(x)

\S4method{nrow}{dbPointsProxy}(x)

\S4method{nrow}{dbPolygonProxy}(x)

\S4method{ncol}{dbMatrix}(x)

\S4method{ncol}{dbDataFrame}(x)

\S4method{ncol}{dbPointsProxy}(x)

\S4method{ncol}{dbPolygonProxy}(x)

\S4method{ncol}{dbDataFrame}(x)

\S4method{dim}{dbData}(x)

\S4method{dim}{dbMatrix}(x)

\S4method{dim}{dbPointsProxy}(x)

\S4method{dim}{dbPolygonProxy}(x)

\S4method{length}{dbSpatProxyData}(x)

\S4method{plot}{dbPointsProxy,missing}(
  x,
  feats = NULL,
  col = c("#002222", "white", "#800020"),
  resolution = 5e+06,
  ext = NULL,
  ...
)

\S4method{ext}{dbSpatProxyData}(x, ...)

\S4method{ext}{dbSpatProxyData,SpatExtent}(x) <- value
}
\arguments{
\item{x}{object to crop}

\item{...}{additional params to pass}

\item{y}{object to crop with}

\item{feats}{feature to plot. Only one allowed at time right now.}

\item{col}{vector of colors to use as color gradient}

\item{resolution}{minimum number of bins to use when rasterizing}

\item{ext}{SpatExtent. Used to set the extent of the plot}

\item{\dots}{additional params to pass to rasterization process}
}
\value{
dbSpatProxyData
}
\description{
Get cell attributes from a dbSpatProxyData
Values are only returned as a \code{dbDataFrame} from dbSpatProxyData
}
\keyword{internal}
