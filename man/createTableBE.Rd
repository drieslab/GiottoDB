% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fields_preset.R
\name{createTableBE}
\alias{createTableBE}
\title{Create a table in the database backend}
\usage{
createTableBE(
  conn,
  name,
  fields_df,
  fields_custom = NULL,
  pk = NULL,
  ...,
  row.names = NULL,
  temporary = FALSE
)
}
\arguments{
\item{conn}{A database connection}

\item{name}{table name}

\item{fields_df}{data frame from which to determine default data types}

\item{fields_custom}{named character vector of columns and manually assigned data types
along with any other in-line constraints}

\item{pk}{character. Which column(s) to select as the primary key}

\item{...}{additional params to pass}

\item{row.names}{Either TRUE, FALSE, NA or a string.\cr
If TRUE, always translate row names to a column called "row_names". If FALSE,
never translate row names. If NA, translate rownames only if they're a
character vector. \cr
A string is equivalent to TRUE, but allows you to override the default name.\cr
For backward compatibility, NULL is equivalent to FALSE.}

\item{temporary}{If TRUE, will generate a temporary table statement.}
}
\description{
Create a table in the backend. Adds some additional functionality on top of
what is expected from \code{\link[DBI]{dbCreateTable}}. A primary key can be
be provided at table creation. Partial inputs to define the table fields are
also possible, where the default data types and schema will be generated based
on a passed in data.frame, but additional information provided as a named list
to \code{fields_custom} param will override the relevant generated default.
}
