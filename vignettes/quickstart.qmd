---
title: "Duckling Quickstart"
format: html
date: last-modified
number-sections: true
---

## Introduction
We are actively developing Duckling and invite you to submit any feedback as 
Github issues to help us improve the package.

This vignette demonstrates the different classes of Duckling and how to work
with them at a basic level.

## Class Structure of Duckling
[![](https://mermaid.ink/img/pako:eNp1VNtu2zAM_RVDT9ua-z3GMKBDuqHAggZpN2Cbh4CWGUeILbmy3CUN8u9jbDl1jOzFEg-PDymS0oFxFSBzGY8gTWcCQg2xJ3PLmWV8GwkZOoffP-6XT99vv_05lj4f-BZlcC_Xyjl40nFuAi1eUK84RJHr8A1o4AZ14fJXCZhNHd5AWseaGrmSErn5XAR4996T56CBPwMDRbxzSkUEwl3H-NFqoVT0P_UbjbEyuJIQY90lpDCuE6lQ0AkuU6nlMAejxa48tYhzuZT-FakpMTKFNBjaU91qYTYnGdo_JKndkVAJchV9sFut_pZbc-X0X6hBaINvcX_hX6hoHyq50Gq3txQwlKyfGTpv5f_cJVcJ8SuJXigRmlaFTmzCrtFxp-TS0nwMihXidgqxkxtrSM1z-_SF3H7h69PaarUugj7SkAiIrvX3693D_O5p-dPN65IWxOcM9d6WKqBZDfzSU6vbfQwh5qo1XVJ20j51Tm5LMwFNuqb9CloXWC7lyfNtaDY_2VrWwMqd8KSd1TeyLXy1ix-bzaJ4NXoxYSfQzloBU310im_Oql1SMBZ12gVhhrLqqwS11bfCeSMKR3WqrnnPk1ITzKvOGixGHYMI6JHJW-Axs0GqBHNpG-Aassh4jIpMVMiMetxLzlyjM2ywLKGLjfZZKsEE5C-lqiZzD2zH3N5w2Or0RpNBdzDuTnrT6bDB9swd91vTcacz7o27I8L7vWODveYCnda0PxqSY9rpDoaT8aDBMBBG6bl9FE_L8R-G8rzk?type=png)](https://mermaid.live/edit#pako:eNp1VNtu2zAM_RVDT9ua-z3GMKBDuqHAggZpN2Cbh4CWGUeILbmy3CUN8u9jbDl1jOzFEg-PDymS0oFxFSBzGY8gTWcCQg2xJ3PLmWV8GwkZOoffP-6XT99vv_05lj4f-BZlcC_Xyjl40nFuAi1eUK84RJHr8A1o4AZ14fJXCZhNHd5AWseaGrmSErn5XAR4996T56CBPwMDRbxzSkUEwl3H-NFqoVT0P_UbjbEyuJIQY90lpDCuE6lQ0AkuU6nlMAejxa48tYhzuZT-FakpMTKFNBjaU91qYTYnGdo_JKndkVAJchV9sFut_pZbc-X0X6hBaINvcX_hX6hoHyq50Gq3txQwlKyfGTpv5f_cJVcJ8SuJXigRmlaFTmzCrtFxp-TS0nwMihXidgqxkxtrSM1z-_SF3H7h69PaarUugj7SkAiIrvX3693D_O5p-dPN65IWxOcM9d6WKqBZDfzSU6vbfQwh5qo1XVJ20j51Tm5LMwFNuqb9CloXWC7lyfNtaDY_2VrWwMqd8KSd1TeyLXy1ix-bzaJ4NXoxYSfQzloBU310im_Oql1SMBZ12gVhhrLqqwS11bfCeSMKR3WqrnnPk1ITzKvOGixGHYMI6JHJW-Axs0GqBHNpG-Aassh4jIpMVMiMetxLzlyjM2ywLKGLjfZZKsEE5C-lqiZzD2zH3N5w2Or0RpNBdzDuTnrT6bDB9swd91vTcacz7o27I8L7vWODveYCnda0PxqSY9rpDoaT8aDBMBBG6bl9FE_L8R-G8rzk)

We are currently working on implementing the following generics.

|         | dbSparseMatrix | dbSemiSparseMatrix | dbDataFrame |
|---------|----------------|--------------------|-------------|
| colSums | âœ…              | âœ…                  | ðŸŸ§           |
| rowSums | âœ…              | âœ…                  | ðŸŸ§           |
| colMean | âœ…              | ðŸŸ§                  | ðŸŸ§           |
| rowMean | âœ…              | ðŸŸ§                  | ðŸŸ§           |
| colSds  | ðŸŸ§              | ðŸŸ§                  | ðŸŸ§           |
| rowSds  | ðŸŸ§              | ðŸŸ§                  | ðŸŸ§           |
| t       | âœ…              | âœ…                  | ðŸŸ§           |
| mean    | âœ…              | âœ…                  | ðŸŸ§           |
| nrow    | âœ…              | âœ…                  | âœ…           |
| ncol    | âœ…              | âœ…                  | âœ…           |
| dim     | âœ…              | âœ…                  | âœ…           |
| head    | ðŸŸ§              | ðŸŸ§                  | ðŸŸ§           |
| tail    | ðŸŸ§              | ðŸŸ§                  | ðŸŸ§           |
| math    | ðŸŸ§              | ðŸŸ§                  | ðŸŸ§           |
| ...     |                |                    |             |

## Loading library

```{r, message=F}
# git clone repo
path_to_duckling = "/Users/user/Documents/dries/Giotto/GiottoDB/"
devtools::load_all(path_to_duckling)

# Load deps
library(DBI)
library(duckdb)
library(dbplyr)
library(dplyr)
```

## Working with large matrices with dbMatrix
`dbMatrix` consists of three subclasses that are designed to work with different
types of matrices. All `dbMatrix` subclasses currently support basic generic operations
as listed below.


### Sparse matrices 
We represent sparse matrices using a triplicate format with `i`, `j`, and `x` vectors.
`i` and `j` refer to the row and column indices, respectively, with specific
`x` values or counts.

We convert in-memory dgCMatrices into ijx matrices using `Matrix::summary(dgc)`. 

The `dbSparseMatrix` class stores this ijx matrix (tehnically now a data.frame)
with their associated dimnames.  
 
```{r eval=TRUE, message=FALSE, warning=FALSE}
# Simulate dbSparseMatrix
sparse = simulate_dbSparseMatrix()

# Generics for dbSparseMatrix
Duckling::colMeans(sparse)

Duckling::colSums(sparse)

dim(sparse)

mean(sparse)
```

## Working with large data.frames with dbDataFrame
Large data.frames can be stored as dbDataFrames directly in DuckDB since they
are essentially the same tabular data structure. 
```{r eval=TRUE, message=FALSE}
# Simulate dbDataFrame
df = simulate_dbDataFrame()

# Generics for dbDataFrame
nrow(df)

ncol(df)

dim(df)
```

## Spatial querying
```{r eval=TRUE, message=FALSE}

```

## Session Info
```{r eval=TRUE, message=FALSE}
sessionInfo()
```

